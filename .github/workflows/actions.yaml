name: Docker Build and Deploy
on:
  push:
    branches: 
      - new
  pull_request:
    branches: 
      - new

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build: 
    runs-on: self-hosted
    outputs:
      image: ${{ steps.tag.outputs.image }}
    permissions:
      contents: read
      packages: write
      actions: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tag
        id: tag
        run: |
          echo "image=ghcr.io/${{ github.repository_owner }}/train_qat_ao:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "image_latest=ghcr.io/${{ github.repository_owner }}/train_qat_ao:latest" >> $GITHUB_OUTPUT
       
      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.tag.outputs.image }}
            ${{ steps.tag.outputs.image_latest }}
          cache-from: |
            type=registry,ref=${{ steps.tag.outputs.image_latest }}
            type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  Deploy-dev:
    needs: build
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      actions: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker Image
        run: docker pull ${{ needs.build.outputs.image }}

      - name: Remove Existing Container (if running)
        run: docker rm -f train_qat_ao || true

      - name: Run Docker Container
        run: |
          docker run -d --name train_qat_ao \
            --runtime=nvidia --gpus=all --ipc host -v home/pramod/Documents/archive:/archive \
            -p 8080:8080 \
            ${{ needs.build.outputs.image }} --entrypoint /bin/bash -c "while true; do sleep 30; done"

  Wait-for-approval:
    needs: Deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy_info.outputs.deployment_url }}
    steps:
      - name: Deployment Info
        id: deploy_info
        run: |
          echo "Waiting for manual approval before deploying to production"
          echo "deployment_url=https://github.com/${{ github.repository }}/actions/workflows/docker-build-deploy.yml" >> $GITHUB_OUTPUT
  
  Deploy-stag:
    needs: Wait-for-approval
    runs-on: self-hosted
    steps:
      - name: test gpu setup
        run: |
          kubelet apply -f k8s/gpu-test.yaml
      - name: Deploy to staging environment in k3s
        run: |
          # get k8s manifest
            kubectl apply -f k8s/deployment.yaml       
  Deploy-prod:
    needs: Wait-for-approval
    runs-on: ubuntu-22.04
    steps:
      - name: Deploy to AWS GPU Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} ubuntu@${{ secrets.AWS_PUBLIC_IP }} << 'ENDSSH'
          # Login to GHCR
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Pull the image from GHCR
          docker pull ${{ needs.build.outputs.image }}
          
          # Update NVIDIA drivers and toolkit if needed
          sudo apt-get update
          sudo apt-get install -y nvidia-driver-550 nvidia-container-toolkit
          
          # Remove existing container
          docker rm -f train_qat_ao || true
          
          # Run new container
          docker run -d --name train_qat_ao \
            -p 5000:5000 \
            --gpus all \
            ${{ needs.build.outputs.image }}
          ENDSSH